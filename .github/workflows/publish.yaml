name: docker multi-arch build

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Which image to build and push?'
        required: true
        type: choice
        options:
          - mediawiki-fpm
          - mediawiki-jobrunner
      tag:
        description: 'The semantic version tag to apply (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    name: build ${{ inputs.image_name }} for amd64/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate tags
        id: generate_tags
        run: |
          delimiter="$(openssl rand -hex 8)"
          {
            echo 'tags<<$delimiter'
            echo "ghcr.io/${{ github.repository }}/${{ inputs.image_name }}:latest"
            echo "ghcr.io/${{ github.repository }}/${{ inputs.image_name }}:${{ inputs.tag }}"
            echo "$delimiter"
          } >> "$GITHUB_OUTPUT"
          
      - name: Build and push Mediawiki
        if: inputs.image_name == 'mediawiki-fpm'
        uses: docker/build-push-action@v5
        with:
          context: ./mediawiki-fpm
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.generate_tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Mediawiki Jobrunner
        if: inputs.image_name == 'mediawiki-jobrunner'
        uses: docker/build-push-action@v5
        with:
          context: ./mediawiki-jobrunner
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.generate_tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max